\chapter{Utility Functions}

\begin{ddanger}
Most of this code you \emph{do not need to know}. The only possible
exception may be that we abstract away the ``working precision'' in the
[[wp]] parameter. If you want to work with single-precision or
quad-precision floating point, then change that parameter to [[real32]]
or [[real128]] (respectively). You have been warned! I will not stop you
from reading this chapter, but the more interesting bits lie in the
chapters ahead.
\end{ddanger}

There are a number of utilities useful for modern programming practice
which \FORTRAN/ does not provide. We collect them into a module.

<<utils.f90>>=
module utils
  use iso_fortran_env, only: real64, int32
  implicit none
    <<[[utils]] Parameters>>
  contains
    <<[[utils]] Functions>>
end module utils
@

\noindent\ignorespaces%
The first parameter worth standardizing is the working precision. Some
computers may handle quadrouple precision (i.e., 128-bit floating point
arithmetic), others hand double precision (i.e., 64-bit floating-point),
and few handle only single precision arithmetic. We store the precision
in [[wp]]. If the user has access to exotic hardware and can perform
128-bit floating point arithmetic, then there is only one line of code
that needs to change.

<<[[utils]] Parameters>>=
  integer, parameter :: wp = real64
@

\section{Assertions for Contracts}

For most production code, it's useful to document assumptions and
requirements in terms of assertions. This has been a ``lightweight
programming-by-contract'' methodology for many languages.

We also want to be able to encode program-by-contract by assertions.
Conventions among \FORTRAN/ programmers use the \CEE/ preprocessor to
implement macros. The macros amount to calling an assertion failure
report subroutine upon failing a contract (except when compiled with
[[NDEBUG]] defined\footnote{This might seem odd to mathematicians and
scientists, but it is grandfathered in: \CEE/ started this tradition,
and other languages picked it up. Given the choice for doing what is
logical or what is conventional, we follow the programmer's creed and
adhere to the principle of least surprise [i.e., convention].}). The
report failure subroutine simply reports the failure, and stops the
program. This code may be found in Victor Eijkhout's
\emph{Introduction to High-Performance Scientific Computing}\footnote{\S28.1.1.2 of \url{https://pages.tacc.utexas.edu/~eijkhout/istc/istc.html}},
which in turn borrows Robert Mclay's code.

<<[[utils]] Functions>>=
<<Define macro to parse [[arg]] as string>>
<<Define [[assert]] macro>>

subroutine assert_failed(file, line_number, test, msg)
  implicit none
  character(*), intent(in) :: file, test, msg
  integer, intent(in) :: line_number
  print *, "Assert: ",trim(test)," Failed at ",trim(file),":",line_number
  print *, "Msg:", trim(msg)
  stop
end subroutine assert
@

\noindent\ignorespaces%
The first macro worth considering simply stringifies
its argument.

<<Define macro to parse [[arg]] as string>>=
#if (defined(GFORTRAN) || defined(G95) || defined(PGI))
# define MKSTR(x) "x"
#else
# define MKSTR(x) #x
#endif
@

\noindent\ignorespaces%
The main star of the assertion faculties is the macro [[assert()]]. We
can turn it off with a compiler parameter, so in production it will not
consume CPU cycles.

<<Define [[assert]] macro>>=
#ifndef NDEBUG
#define assert(x, msg)                                \
    if (.not. (x)) then                               \
        call assert_failed(FILE, LINE, MKSTR(x), msg) \
    end if
#else
#define assert(x, msg)
#endif
@
