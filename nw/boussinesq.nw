% -*- mode: poly-noweb; noweb-code-mode: f90-mode; -*-
\chapter{Simple Boussinesq Equations}\label{ch:simple-boussinesq-equations}

\section{Mathematical Model}

If the density variations are small, then we can employ the
\emph{Boussinesq equations}. We write
\begin{equation}
\rho = \rho_{0}+\delta\rho(x,y,z,t)
\end{equation}
where $\rho_{0}$ is the reference density, and $|\delta\rho|\ll|\rho_{0}|$.

Similarly, we find it often the case that the pressure is in hydrostatic
balance with the reference density. That is to say, we have
\begin{equation}
p = p_{0}(z) + \delta p(x,y,z,t),
\end{equation}
where $|\delta p|\ll p_{0}$ and
\begin{equation}
\frac{\D p_{0}}{\D z} = -g\rho_{0}.
\end{equation}

\subsection{Momentum equations}

We have $\rho=\rho_{0}+\delta\rho$ substituted into the momentum
equations, giving us:
\begin{equation}
(\rho_{0}+\delta\rho)\left(\frac{\materialD\vec{v}}{\materialD t}+2\vec{\Omega}\times\vec{v}\right)
=-\grad(\delta p) - \frac{\partial p_{0}}{\partial
  z}\vec{k}-g(\rho_{0}+\delta\rho)\vec{k}.
\end{equation}
The hydrostatic balance of reference pressure with reference desnity
simplifies the right-hand side to:
\begin{equation}
(\rho_{0}+\delta\rho)\left(\frac{\materialD\vec{v}}{\materialD t}+2\vec{\Omega}\times\vec{v}\right)
=-\grad(\delta p) - g(\rho_{0}+\delta\rho)\vec{k}.
\end{equation}
Since $\delta\rho/\rho_{0}\ll1$, we may simplify things to:
\begin{equation}\label{eq:boussinesq:momentum}
\boxed{\frac{\materialD\vec{v}}{\materialD t}+2\vec{\Omega}\times\vec{v}
=-\grad\phi + b\vec{k}}
\end{equation}
where $\phi=\delta p/\rho_{0}$, and $b=-g\,\variation\rho/\rho_{0}$ is
the buoyancy.

\subsection{Mass continuity}
The mass continuity equation is exactly
\begin{equation}
\frac{\materialD(\variation\rho)}{\materialD t}
+ (\rho_{0}+\variation\rho)\grad\cdot\vec{v} = 0.
\end{equation}
If $\materialD/\materialD t$ scales in the same was as
$\vec{v}\cdot\grad$ (``the time scales advectively''), then we can
approximate this equation by
\begin{equation}\label{eq:boussinesq:mass-continuity}
\boxed{\grad\cdot\vec{v}=0.}
\end{equation}

\subsection{Thermodynamics}
Depending on how much work we want to do, we can use different
approximations for thermodynamic contributions. The thermodynamic
equation of interest is
\begin{equation}
\frac{\materialD\rho}{\materialD t} -
\frac{1}{c_{s}^{2}}\frac{\materialD p}{\materialD t}
=\frac{\dot{Q}}{(\partial\eta/\partial\rho)_{p}T}\approx\dot{Q}\left(\frac{\rho_{0}\beta_{T}}{c_{p}}\right),
\end{equation}
where we used $(\partial\eta/\partial\rho)_{p}=(\partial\eta/\partial T)_{p}(\partial T/\partial\rho)_{p}\approx-c_{p}/(T\rho_{0}\beta_{T})$.
Now we can use the approximations to rewrite the left-hand side as
\begin{equation}
\frac{\materialD\,\variation\rho}{\materialD t} -
\frac{1}{c_{s}^{2}}\frac{\materialD p_{0}}{\materialD t}
=\dot{Q}\left(\frac{\rho_{0}\beta_{T}}{c_{p}}\right),
\end{equation}
or taking advantage of the hydrostatic balance of reference pressure and
density,
\begin{equation}
\frac{\materialD}{\materialD t} -
\left(\variation\rho+\frac{\rho_{0}g}{c_{s}^{2}}z\right)
=-\dot{Q}\left(\frac{\rho_{0}\beta_{T}}{c_{p}}\right).
\end{equation}
But the left-hand side is just the potential density. The roughest
approximation to this neglects the second term, and using
$b=-g\,\variation\rho/\rho_{0}$, which gives us
\begin{equation}
\boxed{\frac{\materialD b}{\materialD t} = \dot{b},}
\end{equation}
where $\dot{b}=g\beta_{T}\dot{Q}/c_{p}$. Taken together with
Eq~\eqref{eq:boussinesq:momentum} and Eq~\eqref{eq:boussinesq:mass-continuity},
we obtain the \define{Simple Boussinesq Equations}.

If there is no forcing or dissipation, and only a uniform gravitational
field, we can simply use:
\begin{equation}
\frac{\materialD b}{\materialD t} = 0.
\end{equation}

\subsection{Simplified Model}
The atmosphere really is quite shallow compared to the radius of the
Earth. Let us try to model the atmosphere as a 2-dimensional fluid about
a rotating sphere, using the simple Boussinesq equations. We would have
\begin{subequations}
\begin{align}
\partial_{t}u+\frac{u}{a\cos(\theta)}\partial_{\lambda}u+\frac{v}{a}\partial_{\theta}u-2\Omega
v\sin(\theta)-\frac{uv}{a}\tan(\theta) &= \frac{-1}{a\cos(\theta)}\partial_{\lambda}\phi\\
\partial_{t}v+\frac{u}{a\cos(\theta)}\partial_{\lambda}v+\frac{v}{a}\partial_{\theta}v+2\Omega
u\sin(\theta)+\frac{u^{2}}{a}\tan(\theta) &= \frac{-1}{a}\partial_{\theta}\phi\\
\partial_{\lambda}u+\partial_{\theta}(v\cos(\theta)) &= 0.
\end{align}
\end{subequations}
We will need some initial conditions for $u$, $v$, and $\phi=\variation p/\rho_{0}$.
We also need some way to figure out the time-evolution for $\phi$, which
we could simplify as
\begin{equation}
\frac{\materialD}{\materialD t}\phi=\partial_{t}\phi+\frac{u}{a\cos(\theta)}\partial_{\lambda}\phi+\frac{v}{a}\partial_{\theta}\phi=0.
\end{equation}
However, this is over-determined (4 equations but only 3 unknowns).

Discarding the $\tan(\theta)$ terms in the momentum equations,
discarding the Coriolis terms, and using
the $\materialD\phi/\materialD t=0$ equation, we will work with:
\begin{subequations}
\begin{align}
\partial_{t}u+\frac{u}{a\cos(\theta)}\partial_{\lambda}u+\frac{v}{a}\partial_{\theta}u%-2\Omega v\sin(\theta)
&= \frac{-1}{a\cos(\theta)}\partial_{\lambda}\phi\\
\partial_{t}v+\frac{u}{a\cos(\theta)}\partial_{\lambda}v+\frac{v}{a}\partial_{\theta}v%+2\Omega u\sin(\theta)
&= \frac{-1}{a}\partial_{\theta}\phi\\
\partial_{t}\phi+\frac{u}{a\cos(\theta)}\partial_{\lambda}\phi+\frac{v}{a}\partial_{\theta}\phi&= 0.
\end{align}
\end{subequations}

\subsection{Finite difference scheme}
We're going to work with the simplest possible finite difference scheme
imaginable, starting with $N\times N$ matrices and treating the first
component as latitude, the second component as longitude. We impose
periodicity on the latitude, so a matrix $a_{m,n}$ will have
$a_{N+1,n}=a_{1,n}$. The pole requires greater care, but we will work
with $N$ even and ``suture'' the pole closed. Conceptually, we will have
$a_{\lambda,N+1}=a_{N-(\lambda-1),N}$, which is best gleaned from the
illustration:
\begin{center}
\includegraphics{img/boussinesq-grid-1.mps}
\end{center}
We see that $a_{1,N+1}=a_{N,N}$, $a_{2,N+1}=a_{N-1,N}$,
$a_{3,N+1}=a_{N-2,N}$ and so on. We will not have a grid point \emph{at}
the North or South pole, we work with $\theta_{n}+\frac{1}{2}\pi=n\pi/(N+1)$
for $n=1$, \dots, $N$.

Now, when taking derivatives near the poles $\theta\approx\pm\pi/2$, the finite
difference scheme is ``squeezed''. For example, let us work through
computing the centered differences in latitude $\lambda$ at
$\theta_{N}$, this would involve 
\begin{equation}
\frac{1}{a\cos(\theta_{N})}\partial_{\lambda}f\approx\frac{1}{a\cos(\theta_{N})}\frac{\Delta f}{\Delta \lambda}
\end{equation}
where, after some trig manipulations, we find
\begin{equation}
\cos(\theta_{N})=\cos\left(-\frac{\pi}{2}+\frac{N}{N+1}\pi\right)=\sin\left(\frac{N\pi}{1+N}\right).
\end{equation}
Actually, we can add and subtract by 1 to get
\begin{equation}
\sin\left(\frac{N\pi}{1+N}\right)=\sin\left(\frac{(N+1-1)\pi}{1+N}\right)=\sin\left(\frac{\pi}{1+N}\right).
\end{equation}
So we're dividing by a number very close to zero. For $N=32$, this would
be $\sin(\pi/33)\approx0.095056$, and for $N=128$ we'd have
$\sin(\pi/129)\approx0.024351$. So we would have
\begin{equation}
\frac{1}{a\cos(\theta_{N})}\partial_{\lambda}f\approx\frac{1}{a\sin(\pi/(N+1))}\frac{f(\lambda_{k}+\Delta\lambda)-f(\lambda_{k}-\Delta\lambda)}{2\Delta\lambda}
-\frac{1}{a\sin(\pi/(N+1))}\frac{(\Delta\lambda)^{2}}{6}f'''(\xi)
\end{equation}
for some $\xi\in[\lambda_{k}-\Delta\lambda.\lambda_{k}+\Delta\lambda]$.

Let us work through the finite differences for the equations to see if
we risk numerical instability with our choices of $\Delta t$, $\Delta\lambda$,
and $\Delta\theta$.

\subsection{Truncated series expansion}
Since we're working on the surface of a sphere, it's handy to work with
a series expansion in terms of spherical harmonics
$Y_{m,n}(\lambda,\mu)$ where $\mu=\sin(\theta)$. The full series
expansion
\begin{equation}
f(t,\theta,\mu) = \sum^{\infty}_{m=-\infty}\sum^{\infty}_{n=|m|}f_{m,n}(t)Y_{m,n}(\theta,\mu)
\end{equation}
where the coefficients $f_{m,n}(t)$ are functions of time, would be
truncated
\begin{equation}
f(t,\theta,\mu) \approx \sum^{M}_{m=-M}\sum^{N(m)}_{n=|m|}f_{m,n}(t)Y_{m,n}(\theta,\mu).
\end{equation}
Particularly useful are the triangular truncation $N(m)=M$ and the
rhomboidal truncation $N(m)=|m|+M$. Then we would have a first-order
system of nonlinear ordinary differential equations.

This would be particularly useful, but it would require transforming the
Boussinesq equations quite a bit before obtaining a system amenable to
spectral methods. It would be a useful exercise to do so, and compare
results from the finite difference scheme and the spectral method.

\section{Implementing Finite Difference Scheme}

We will discard Coriolis effect terms, and solve the simple Boussinesq
equations using finite difference scheme.

<<boussinesq.f90>>=
program boussinesq
  use iso_fortran_env
  use utils
  implicit none
  <<[[boussinesq]] program>>
contains
  <<[[boussinesq]] functions>>
end program boussinesq
@

\subsection{Main Routine}
The main routine for most numerical programs describing the
time-evolution of a quantity boils down to initializing the parameters,
then iteratively stepping through time.

<<[[boussinesq]] program>>=
<<[[boussinesq]] program parameters>>
<<Initialize [[boussinesq]] parameters>>

do i=1, num_steps
   <<Main loop for [[boussinesq]]>>
end do
<<Check energy conservation for [[boussinesq]]>>
@

\subsection{Main loop for Boussinesq equations}
We will be using the forward Euler scheme for time-evolution, and
centered differences for first-order derivatives with respect to
$\theta$ and $\lambda$. This reflects the equations we have derived, but
it requires some thought to realize it. However, this is a ``first draft''
which we hope to improve upon with the abstraction of a [[Field]] class.

<<Main loop for [[boussinesq]]>>=
u_prev = u
v_prev = v
phi_prev = phi
uc = mul_sec_theta(u_prev, d_theta)
u = u_prev &
     - dt*inv_earth_radius*(mult_fields(uc, diff_lambda(u_prev)/d_lambda) &
     + mult_fields(v_prev, diff_theta(u_prev)/d_theta) &
     + mul_sec_theta(diff_lambda(phi_prev)/d_lambda, d_theta))
v = v_prev &
     - dt*inv_earth_radius*(mult_fields(uc, diff_lambda(v_prev)/d_lambda) &
     + mult_fields(v_prev, diff_theta(v_prev)/d_theta) &
     + mul_sec_theta(diff_theta(phi_prev)/d_theta, d_theta))
phi = phi_prev &
     - dt*inv_earth_radius*(mult_fields(uc, diff_lambda(phi_prev)/d_lambda) &
     + mult_fields(v_prev, diff_theta(phi_prev)/d_theta))
@ 

\subsection{Initializing parameters}
We will suppose we are working with a
$N_{\lambda}\times N_{\theta}=64\times32$ matrix, since 
$\Delta\theta=\pi/N_{\theta}$ and $\Delta\lambda=2\pi/N_{\lambda}$.
We want these two to be equal to each other, which means that
$2N_{\theta}=N_{\lambda}$ and I just picked $N_{\lambda}=64$ for convenience.
This gives us $\Delta\lambda\approx 0.0981748$
For the choice of time-stepping, since I'm working with a
quick-and-dirty ``first draft'' of a forward Euler time-step,
I'm going to pick $\Delta t=(\Delta\lambda)^{2}\approx0.00963829$
as the time step.

We will also assume the initial value of the velocities and $\phi$ are
described by a Gaussian $\exp(-\alpha(\lambda^{2}+\theta^{2}))$ where
the decay parameter $\alpha$ is $1/8$ for velocities and $1/4$ for $\phi$.

<<Initialize [[boussinesq]] parameters>>=
d_theta = pi/N_theta
d_lambda = 2*pi/N_lambda
dt = (d_lambda)**2
num_steps = 1000

call set_gaussian(u, 0.125_wp)
call set_gaussian(v, 0.125_wp)
call set_gaussian(phi, 0.25_wp)
initial_energy = energy(u, v, phi, d_theta)
@ 

\subsection{Declaration of parameters}
We will also need to keep track of the previous values for the physical
fields [[u_prev]], [[v_prev]], and [[phi_prev]], as well computing
$u/\cos(\theta)$ which is stored as [[uc]].

We store $\Delta\theta$, $\Delta\lambda$, and $\Delta t$ as [[d_theta]],
[[d_lambda]], and [[dt]], respectively.

<<[[boussinesq]] program parameters>>=
integer(int32), parameter :: N_lambda = 64, N_theta = 32
integer(int32) :: num_steps, i
real(wp), dimension(N_lambda,N_theta) :: u, u_prev, v, v_prev, phi, &
     phi_prev, uc
real(wp) :: d_theta, d_lambda, dt, initial_energy, final_energy
@

\subsection{Check energy is conserved}
We are using the composite trapezoid rule to integrate the energy
density over $\lambda$ and $\theta$, which means we would expect an
error of
\begin{equation}
E\approx\frac{8\pi^{6}}{144N_{\theta}^{2}N_{\lambda}^{2}}\mathcal{E}''=(1.27341\times 10^{-5})\mathcal{E}''
\end{equation}
where $\mathcal{E}''$ is the second derivative of the energy density.
We will find the difference between initial and final energies are
$1.4545619419187306\times 10^{-5}$. Although this doesn't prove that the
implementation is correct, this gives us greater confidence towards that
end. 

<<Check energy conservation for [[boussinesq]]>>=
final_energy = energy(u, v, phi, d_theta)
print *, "initial energy = ", initial_energy
print *, "final energy = ", final_energy
print *, "difference = ", final_energy - initial_energy
@ 


\section{Helper functions}

<<[[boussinesq]] functions>>=

<<Componentwise-multiplying fields>>

<<Initialize fields to Gaussian values>>

<<Secant of longitude>>

<<Derivative with respect to $\lambda$>>

<<Derivative with respect to $\theta$>>

<<Energy density for simple Boussinesq system>>

<<Energy integral for simple Boussinesq system>>
@

\subsection{Componentwise-multiplication of fields}
We will need to compute things like $u\partial_{\lambda}v$ and so on,
which requires multiplying two fields together component-wise.

<<Componentwise-multiplying fields>>=
pure function mult_fields(lhs, rhs) result(ans)
  real(wp), dimension(:,:), intent(in) :: lhs, rhs
  real(wp) :: ans(size(lhs,dim=1),size(lhs,dim=2))
  integer(int32) :: i, j, max_lambda, max_theta
  max_lambda = size(lhs,dim=1)
  max_theta = size(lhs,dim=2)
  do concurrent(i = 1:max_lambda, j=1:max_theta)
     ans(i,j) = lhs(i,j)*rhs(i,j)
  end do
end function mult_fields
@ %def mult_fields

\subsection{Initialize field values} We pick the Gaussian for the
initial values of the fields.

<<Initialize fields to Gaussian values>>=
subroutine set_gaussian(field, decay)
  real(wp), dimension(:,:), intent(in out) :: field
  real(wp), intent(in) :: decay
  integer(int32) :: i, j, max_lambda, max_theta
  max_lambda = size(field,dim=1)
  max_theta = size(field,dim=2)
  do concurrent(i = 1:max_lambda, j=1:max_theta)
     field(i,j) = exp(-decay*((i - max_lambda/2)**2 + (j - max_theta/2)**2))
  end do
end subroutine set_gaussian
@ %def set_gaussian

\subsection{Secant of longitude} We need to multiply fields by secant of
longitude, i.e., divide by $\cos(\theta)$.

<<Secant of longitude>>=
<<Compute longitude>>

pure function mul_sec_theta(field, d_theta) result(ans)
  real(wp), dimension(:,:), intent(in) :: field
  real(wp) :: ans(size(field, dim=1), size(field, dim=2))
  real(wp), intent(in) :: d_theta
  integer(int32) :: i
  
  do i=1,size(field,dim=2)
    ans(:,i) = field(:,i)/cos(theta(i,d_theta))
  end do
end function mul_sec_theta
@ %def mul_sec_theta

\subsection{Computing theta} We need to convert between the index $k$
and the longitude,
\begin{equation}
\theta_{k} = \left(k - \frac{1}{2}\right)\Delta\theta - \frac{\pi}{2}.
\end{equation}
This will give us evenly-spaced values in the range
$-(\pi/2)+\frac{1}{2}\Delta\theta\leq\theta_{k}\leq(\pi/2)-\frac{1}{2}\Delta\theta$.

<<Compute longitude>>=
pure function theta(n, d_theta)
  integer(int32), intent(in) :: n
  real(wp), intent(in) :: d_theta
  real(wp) :: theta
  ! assert(1 <= n <= N)
  theta = ((n - 0.5_wp)*d_theta) - (0.5_wp)*pi
end function theta
@ 

\subsection{Derivative with respect to latitude}
Using centered difference for approximating the derivative with respect
to $\lambda$, and periodicity for handling the derivatives at
$\lambda_{n}$ for $n=1$ and $n=N_{\lambda}$.

<<Derivative with respect to $\lambda$>>=
pure function diff_lambda(field)
  real(wp), dimension(:,:), intent(in) :: field
  real(wp) :: diff_lambda(size(field, dim=1), size(field, dim=2))
  integer(int32) :: M
  M = size(field, dim=1)
  ! centered difference for periodic function
  diff_lambda(2:M-1, :) = 0.5*(field(3:M, :)-field(1:M-2, :))
  diff_lambda(M, :) = 0.5*(field(1, :) - field(M-1, :))
  diff_lambda(1, :) = 0.5*(field(2, :) - field(M, :))
end function diff_lambda
@ %def diff_lambda

\subsection{Grid}
The grid will be formed using a rectangular array, then forming periodic
boundary conditions in the latitude $\lambda$. This gives us a cylinder.

We then close the top by identifying cell $\lambda=1$ with $\lambda=N$,
$\lambda=2$ with $\lambda=N-1$, \dots, and $\lambda=\frac{1}{2}N$ with
$\lambda=\frac{1}{2}N+1$. Basically, the intuition is at the ``North
pole'' (or ``South pole'') we wrap the grid around and identify opposite
nodes as adjacent:
\begin{center}
\includegraphics{img/boussinesq-grid-1.mps}
\end{center}
This tells us to identify $u_{\lambda,N+1}=u_{N-(\lambda-1),N}$ for the
North pole, and $u_{\lambda,0}=u_{N-(\lambda-1),1}$ for the South pole.

There is another way to approach computing the $\theta$-derivative near
the pole, since $\theta_{1}$ is $\Delta\theta/2$ steps away: once at the
pole, we are equally likely to go to any of the points on the
penultimate parallel. Something like the following (first half of the
step is on the left in black
from $\lambda_{1}$ to the pole, then the next half of the step on the
right):
\begin{center}
\includegraphics{img/boussinesq-grid-2.mps}\qquad\ \qquad
\includegraphics{img/boussinesq-grid-3.mps}
\end{center}
Then, at the north pole $\theta_{N}$ the
derivative would use the finite difference scheme
\begin{subequations}
\begin{equation}
f'(\theta_{N},\lambda_{i})\approx\frac{\left(\frac{1}{N}\sum^{N}_{j=1}f(\theta_{N},\lambda_{j})\right) - f(\theta_{N-1},\lambda_{i})}{2\Delta\theta}.
\end{equation}
Similarly, at the South pole, the derivative would be approximated by
\begin{equation}
f'(\theta_{1},\lambda_{i})\approx\frac{f(\theta_{2},\lambda_{i}) - \left(\frac{1}{N}\sum^{N}_{j=1}f(\theta_{1},\lambda_{j})\right)}{2\Delta\theta}.
\end{equation}
\end{subequations}

<<Derivative with respect to $\theta$>>=
pure function diff_theta(field)
  real(wp), dimension(:,:), intent(in) :: field
  real(wp) :: avg, diff_theta(size(field, dim=1), size(field, dim=2))
  integer(int32) :: M, N
  M = size(field, dim=2)
  N = size(field, dim=1)
  ! centered difference for periodic function
  diff_theta(:, 2:M-1) = 0.5*(field(:, 3:M)-field(:, 1:M-2))
  ! boundary conditions
  ! north pole
  avg = SUM(field(:,M))/N
  diff_theta(:,M) = 0.5*(avg - field(:,M-1))
  ! south pole
  avg = SUM(field(:,1))/N
  diff_theta(:,1) = 0.5*(field(:,2)-avg)
end function diff_theta
@ %def diff_theta

\subsection{Energy Density}
We will want to compute the total energy for the velocity vector fields
before and after the simulation, to check if the total energy is in fact
conserved. Towards that end, the energy will be:
\begin{equation}
E = \iint_{S^{2}}\left(\frac{u(\lambda,\theta)^{2}+v(\lambda,\theta)^{2}}{2}+\phi(\lambda,\theta)\right)r_{\odot}^{2}\cos(\theta)\,\D\theta\,\D\lambda
\end{equation}
(following Bernoulli's principle, we expect $\phi$ to contribute to the energy).
We take as the definition of the energy density for the simple
Boussinesq system
\begin{equation}
\mathcal{E}(\lambda,\theta) = \left(\frac{u(\lambda,\theta)^{2}+v(\lambda,\theta)^{2}}{2}+\phi(\lambda,\theta)\right)r_{\odot}^{2}\cos(\theta).
\end{equation}
This will be used in a product quadrature to numerically integrate over
the sphere.

Also note that multiplying by the square of the Earth's radius $r_{\odot}^{2}$
will only re-scale the result, so we will omit it for expediency.

<<Energy density for simple Boussinesq system>>=
pure function energy_density(u, v, phi, i_lambda, j_theta, d_theta)
  real(wp), dimension(:,:), intent(in) :: u, v, phi
  integer(int32), intent(in) :: i_lambda, j_theta
  real(wp), intent(in) :: d_theta
  real(wp) :: energy_density
  energy_density = (0.5*(u(i_lambda, j_theta)**2 + v(i_lambda, j_theta)**2) &
       + phi(i_lambda, j_theta))*cos(theta(j_theta, d_theta))
end function energy_density
@ %def energy_density

\subsection{Energy integral}
We will use the trapezoid rule, twice,
\begin{equation}
f(\lambda) := \int^{\pi}_{0}\mathcal{E}(\lambda,\theta)\,\D\theta
\approx\sum^{N_{\theta}-1}_{j=1}\frac{\mathcal{E}(\lambda,\theta_{j})+\mathcal{E}(\lambda,\theta_{j+1})}{2}\Delta\theta
\end{equation}
then integrating over the latitude (taking into account periodicity)
\begin{equation}
\int^{2\pi}_{0}f(\lambda)\,\D\lambda\approx\sum^{N_{\lambda}}_{i=1}\frac{f(\lambda_{i})+f(\lambda_{i+1})}{2}\Delta\lambda=\Delta\lambda\sum^{N_{\lambda}}_{i=1}f(\lambda_{i}).
\end{equation}
We have (unfolding the $\theta$ quadrature, collecting terms, and simplifying):
\begin{equation}
\iint_{S^{2}}\mathcal{E}(\lambda,\theta)\,\D\theta\,\D\lambda
\approx\sum^{N_{\lambda}}_{i=1}\left[\frac{\mathcal{E}(\lambda_{i},\theta_{1})+\mathcal{E}(\lambda_{i},\theta_{N_{\theta}})}{2}+\sum^{N_{\theta}-2}_{j=2}\mathcal{E}(\lambda_{i},\theta_{j})\right]\Delta\theta\,\Delta\lambda
\end{equation}

<<Energy integral for simple Boussinesq system>>=
pure function energy(u, v, phi, d_theta)
  real(wp), dimension(:,:), intent(in) :: u, v, phi
  real(wp), intent(in) :: d_theta
  real(wp) :: energy
  integer(int32) :: i, j
  energy = 0.0_wp
  do i=1, N_lambda
     energy = energy + 0.5*(energy_density(u, v, phi, i, 1, d_theta) &
          + energy_density(u, v, phi, i, N_theta, d_theta))
     do j=2, N_theta-2
        energy = energy + energy_density(u, v, phi, i, j, d_theta)
     end do
  end do
  energy = energy * d_theta * (2*pi/N_lambda)
end function energy
@ %def energy

\section{Concluding Remarks}

\subsection{Pole Problem}
If you look at how we handled forming a grid for the Earth, we began
with a rectangle $N_{\lambda}\times N_{\theta}$ grid, then imposed periodicity on the
$\lambda$-axis, and ``sutured'' the poles together. For $N_{\lambda}=64$, this means
along the equator we would have about $2\pi R/N_{\lambda}\approx 625$ kilometers be the width
of a tile, whereas at the North or South poles we would have about
$2\pi R\cos(\frac{1}{2}\pi-\pi/N_{\theta})/N_{\lambda}\approx61.26$ kilometers be the
width of a tile. This is an alarming difference in grid scale.

Further, we specifically chose the $\theta$ spacing to avoid having
$\theta=0$ and $\theta=\pi$ be part of the grid, because it would have
caused numerical problems with the terms involving factors of $1/\sin(\theta)$.

These related problems are known as the ``pole problem''. The way to
address it is to work with a different grid, or a different numerical
scheme (spectral methods would easily avoid this problem, i.e., using a
truncated series expansion for our physical quantities).

\subsection{Next steps}
The first steps towards a realistic model would be to include the
Coriolis terms and the metric terms.

Adding multiple layers, and bringing back buoyancy $b$, would be the
steps after that.

But before we can do any of this, we should first create a ``field''
abstraction for $u$, $v$, and $\phi$, and then we should focus more on
the grid being used for approximating the Earth's surface.

We could also take advantage ofthe Helmholtz decomposition of a vector
field in 3-dimensions, namely that the velocity vector field $\vec{u}$
may be written as
\begin{equation}
\vec{u}=\widehat{\vec{k}}\times\grad\psi + \grad\chi
\end{equation}
where $\psi$ is the streamfunction and $\chi$ is the velocity potential.
This is how most climate models work, then we apply spectral methods to
$\chi$ and $\psi$, and then relate them back to our vector field
$\vec{u}$. 
