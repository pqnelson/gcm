\chapter{Field Quantities}

We have quantities of interest in our climate model be described by
tensors: scalar fields like temperature or pressure are rank-zero
tensors, vector fields like fluid velocity are rank-one tensors, the
stress tensor is a rank-two tensor. Our class hierarchy will have an
abstract [[field]] class, extended as one of three: [[scalar_field]],
[[vector_field]], or [[tensor_field]] for rank-2 tensors.

Care must be taken, since we're effectively considering fields on the
domain
\begin{equation}
  \mathcal{D} = S^{2}\times I^\circ
\end{equation}
where $I^\circ=(0,1)$ is the open unit interval, and $S^{2}$ is the 2-sphere.
There are several approaches to numerical schemes, and the [[field]]
data structure depends on the choice of scheme:
\begin{enumerate}
\item Finite difference schemes: the [[field]] is a vector of values on
  the mesh;
\item Spectral methods: the [[field]] consists of the coefficients to a
  given family of basis functions;
\item Finite volume methods: like finite difference schemes, the
  [[field]] is a vector of values --- but some finite volume schemes
  have the [[field]] be described as a linear function on each cell, so
  the [[field]] has 6 values per cell (3 for the slope, 3 for the intercept).
\end{enumerate}

\section{Scalar Fields}

Scalar fields are one of the two important abstractions for climate
models (and fluid mechanics in general). We're making the design
decision to restrict attention to real-valued scalar fields. For our
purposes, double-precision floating point numbers approximate real
numbers.

<<scalar-field-class.f90>>=
module scalar_field_class
  use iso_fortran_env, only: int32, stderr => error_unit
  use utils
  implicit none

  private
  <<[[scalar_field]] type declarations>>

  <<[[scalar_field]] public exports>>
contains
  <<[[scalar_field]] functions>>
end module scalar_field_class

@
\subsection{Type Declaration}
We have a couple declarations, namely the [[scalar_field]] type and
the public interface to its constructor. The data type encodes different
information depending on the numerical scheme we choose to deploy. For
example, finite difference schemes will treat a scalar field as a finite
(but large) vector, whereas spectral methods require encoding the scalar
field as a list of coefficients to some family of orthogonal functions.

For simplicity, we are working with some finite difference scheme.

\begin{rmk}
  We should emphasize another design consideration: what about initial
  values or boundary values? Ostensibly, we should have a constructor
  for an initial value problem which ``initializes'' a field, and
  another constructor for a boundary value problem which enforces the
  boundary conditions. Care must be taken with the boundary value
  problem, because if we encode the boundary conditions as a module
  parameter (``static variable''), then we can't reuse the code for
  additional fields. We should either have a pointer to some data type
  encoding the boundary conditions, or make it a field in the
  [[scalar_field]] directly.
\end{rmk}

<<[[scalar_field]] type declarations>>=
type scalar_field
   private
   character(:), allocatable :: name
   integer(int32) :: dims(2)
   real(wp), allocatable, dimension(:,:) :: values
contains
  procedure, private, pass(self) :: copy_metadata
  procedure, public, pass(self) :: nodal_values
  procedure, public, pass(self) :: field_size
  <<[[scalar_field]] arithmetic operator declarations>>
end type scalar_field

@

\subsection{Arithmetic Operators}
The scalar field has the basic operators defined: addition
$(\varphi_{1}+\varphi_{2})(x) = \varphi_{1}(x) + \varphi_{2}(x)$, and so
on.

<<[[scalar_field]] arithmetic operator declarations>>=
procedure, private, pass(self) :: field_assign_field
procedure, private, pass(self) :: field_assign_scalars
procedure, private, pass(self) :: field_add_field
procedure, private, pass(self) :: field_sub_field
procedure, private, pass(self) :: field_mult_field

generic :: operator(=) => field_assign_field, field_assign_scalars
generic :: operator(+) => field_add_field
generic :: operator(-) => field_sub_field
generic :: operator(*) => field_mult_field
@

Assigning a field is used for updating the value.

<<Assigning a [[scalar_field]] a new field value>>=
subroutine field_assign_field(self, other)
  class(scalar_field), intent(in out) :: self
  class(scalar_field), intent(in) :: other
  call copy_metadata(self, other)
  self%values = other%values
end subroutine field_assign_field
@ %def field_assign_field

<<Assigning a [[scalar_field]] a new value from scalar approximations>>=
subroutine field_assign_scalars(self, scalars)
  class(scalar_field), intent(in out) :: self
  real(dp), intent(in) :: scalars(self%dim(1), self%dim(2))
  self%values = scalars
end subroutine field_assign_scalars
@ %def field_assign_field


Adding two fields together should yield a \emph{new} field.

<<Adding two [[scalar_field]] instances>>=
pure type(scalar_field) function field_add_field(self, other) result(res)
  class(scalar_field), intent(in) :: self, other
  call copy_metadata(res, self)
  res % values = self % values + other % values
end function field_add_field
@ %def field_add_field

<<Subtracting two [[scalar_field]] instances>>=
pure type(scalar_field) function field_sub_field(self, other) result(res)
  class(scalar_field), intent(in) :: self, other
  call copy_metadata(res, self)
  res % values = self % values - other % values
end function field_sub_field
@ %def field_sub_field

Component-wise multiplication of two fields, corresponding to what
happens all the time in physics $\varphi(x)\psi(x)$.

<<Multiplying two [[scalar_field]] instances>>=
pure type(scalar_field) function field_mult_field(self, other) result(res)
  class(scalar_field), intent(in) :: self, other
  call copy_metadata(res, self)
  res % values = self % values * other % values
end function field_mult_field
@ %def field_mult_field

<<Copying metadata>>=
subroutine copy_metadata(self, other)
  self%name = other%name
  self%dims = other%dims
end subroutine copy_metadata
@ %def copy_metadata

We make accessible these subroutines and functions

<<[[scalar_field]] functions>>=
<<Copying metadata>>

<<Assigning a [[scalar_field]] a new value from scalar approximations>>

<<Assigning a [[scalar_field]] a new field value>>

<<Adding two [[scalar_field]] instances>>

<<Subtracting two [[scalar_field]] instances>>

<<Multiplying two [[scalar_field]] instances>>

@


\subsection{Constructor}
The constructor is abstracted away as ``some procedure'' which is made
public as the [[interface scalar_field]].

<<[[scalar_field]] type declarations>>=
interface scalar_field
  module procedure :: new_scalar_field
end interface
@

For completeness, we now mark public the interface.

<<[[scalar_field]] public exports>>=
public :: scalar_field
@

The constructor's implementation is straightforward. Again, we're
working with the assumption that we're working on a spherical grid.

<<[[scalar_field]] constructor>>=
type(scalar_field) function new_scalar_field(name, dims) result(self)
  use iso_fortran_env, only: int32, stderr => error_unit
  use utils
  implicit none
  character(*), intent(in) :: name
  integer(int32), intent(in) :: dims(2)

  <<Check if [[scalar_field]] constructor inputs are valid>>

  self % name = name
  self % dims = dims
  
  allocate(self % values(1:self%dims(1), 1:self % dims(2)))
  self % values = 0
end function new_scalar_field
@ %def new_scalar_field

We need to make sure the dimensions are positive.

<<Check if [[scalar_field]] constructor inputs are valid>>=
if (dims(1) <= 0) then
   write (stderr, *) "scalar_field_constructor: Invalid dim(1) ", dims(1)
   error stop
end if

if (dims(2) <= 0) then
   write (stderr, *) "scalar_field_constructor: Invalid dim(2) ", dims(2)
   error stop
end if
@

We export this constructor.

<<[[scalar_field]] functions>>=
<<[[scalar_field]] constructor>>

@

\subsection{Accessor Functions}

We can continue on to obtain the discrete approximation encoded by the
scalar field, evaluated on the mesh points.

<<[[scalar_field]] functions>>=
pure function field_size(this)
  class(scalar_field), intent(in) :: this
  integer(int32) :: field_size(2)
  field_size = this%dims
end function

pure function nodal_values(this)
  class(scalar_field), intent(in) :: this
  real(wp), allocatable :: nodal_values
  allocate(nodal_values(this%dims(1), this%dims(2)), source = this%values)
end function
@